name: Create Boot Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  prerequisites:
    name: Prepare Magisk Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Get Magisk link
        id: magisk
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'image_info.json'
          prop_path: 'magisk'

      - name: Download boot script
        uses: wei/wget@v1
        with:
          args: https://raw.githubusercontent.com/topjohnwu/Magisk/master/scripts/boot_patch.sh

      - name: Download utility function script
        uses: wei/wget@v1
        with:
          args: https://raw.githubusercontent.com/topjohnwu/Magisk/master/scripts/util_functions.sh
          
      - name: Download Magisk app
        uses: wei/wget@v1
        with:
          args: -O Magisk.apk ${{steps.magisk.outputs.prop}}
          
      - name: Upload Magisk app to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: magiskapp
          path: ./Magisk.apk
          
      - name: Upload boot script to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: boot_script
          path: ./boot_patch.sh
          
      - name: Upload utility function script to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: util_functions
          path: ./util_functions.sh
          
          
  factory_image:
    name: Get Factory Image and Extract Boot Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Get factory image link
        id: link
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'image_info.json'
          prop_path: 'link'
          
      - name: Download factory image
        uses: wei/wget@v1
        with:
          args: -O factory_image.zip ${{steps.link.outputs.prop}}
          
      - name: Get image build number
        id: build_no
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'image_info.json'
          prop_path: 'build_number'
          
      - name: Unzip factory image
        run: |
            mkdir factory_image
            unzip factory_image.zip -d factory_image
            
      - name: Extract boot image
        run: |
            rm factory_image.zip
            export FOLDER_NAME=$(ls -h factory_image/ | grep -i ${{steps.build_no.outputs.prop}})
            echo "FOLDER_NAME=${FOLDER_NAME}" >> $GITHUB_ENV
            unzip factory_image/"${FOLDER_NAME}/image-${FOLDER_NAME}.zip"
            
      - name: Upload boot image to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: boot_img_unpatched
          path: ./boot.img
          
          
  patch_img:
    name: Gather Files and Start Patching
    needs: [prerequisites, factory_image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Get Magisk app from artifacts
        uses: actions/download-artifact@v2
        with:
          name: magiskapp
          
      - name: Get boot script from artifacts
        uses: actions/download-artifact@v2
        with:
          name: boot_script
          
      - name: Get utility function script from artifacts
        uses: actions/download-artifact@v2
        with:
          name: util_functions
          
      - name: Get boot image from artifacts
        uses: actions/download-artifact@v2
        with:
          name: util_functions
          
      - name: Unzip files
        run: |
            cp Magisk.apk Magisk.zip
            mkdir magisk_unzipped
            unzip Magisk.zip -d magisk_unzipped/
          
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Get aarch64 machine and patch
        id: armcmd
        with:
          arch: aarch64
          distro: ubuntu20.04
          
          githubToken: ${{ github.token }}
          
          run: |
            cp magisk_unzipped/lib/armeabi-v7a/libmagiskinit.so ./magiskinit
            cp magisk_unzipped/lib/armeabi-v7a/libmagiskboot.so ./magiskboot
            cp magisk_unzipped/lib/armeabi-v7a/libmagisk32.so ./magisk32
            cp magisk_unzipped/lib/armeabi-v7a/libmagisk64.so ./magisk64
            echo ::set-output name=inside_list::$(ls -al)
            
      - name: Get results
        run: |
          echo ${{ steps.armcmd.outputs.inside_list }}
          
